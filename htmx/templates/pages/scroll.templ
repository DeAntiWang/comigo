package pages

import (
	"fmt"
	"github.com/yumenaka/comigo/entity"
	"github.com/yumenaka/comigo/htmx/state"
	"github.com/yumenaka/comigo/htmx/templates/components"
	"strings"
)

// js代码,滚动到顶部,显示返回顶部按钮,获取鼠标位置,决定是否打开设置面板等

script ScrollScripts() {
//滚动到顶部
function scrollToTop(scrollDuration) {
    let scrollStep = -window.scrollY / (scrollDuration / 15),
        scrollInterval = setInterval(function () {
            if (window.scrollY !== 0) {
                window.scrollBy(0, scrollStep);
            }
            else clearInterval(scrollInterval);
        }, 15);
}
// Button ID为BackTopButton的元素，点击后滚动到顶部
document.getElementById("BackTopButton").addEventListener("click", function () {
    scrollToTop(500);
});

//滚动到一定位置显示返回顶部按钮
let scrollTopSave = 0
let scrollDownFlag = false
let step = 0
function onScroll() {
    let scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
    scrollDownFlag = scrollTop > scrollTopSave;
    //防手抖,小于一定数值状态就不变 Math.abs()会导致报错
    step = scrollTopSave - scrollTop;
    // console.log("this.scrollDownFlag:",this.scrollDownFlag,"scrollTop:",scrollTop,"step:", step);
    scrollTopSave = scrollTop
    if (step < -10 || step > 10) {
        showBackTopFlag = ((scrollTop > 400) && !scrollDownFlag);
        if (showBackTopFlag) {
            document.getElementById("BackTopButton").style.display = "block";
        } else {
            document.getElementById("BackTopButton").style.display = "none";
        }
    }
}
window.addEventListener("scroll", onScroll);

//可见区域变化的时候改变页面状态
function onResize() {
    this.ScrollModeConfig.imageMaxWidth = window.innerWidth
    this.clientWidth = document.documentElement.clientWidth
    this.clientHeight = document.documentElement.clientHeight
    // var aspectRatio = window.innerWidth / window.innerHeight
    this.aspectRatio = this.clientWidth / this.clientHeight
    // 为了调试的时候方便,阈值是正方形
    if (this.aspectRatio > (19 / 19)) {
        this.ScrollModeConfig.isLandscapeMode = true
        this.ScrollModeConfig.isPortraitMode = false
    } else {
        this.ScrollModeConfig.isLandscapeMode = false
        this.ScrollModeConfig.isPortraitMode = true
    }
}
//文档视图调整大小时触发 resize 事件。 https://developer.mozilla.org/zh-CN/docs/Web/API/Window/resize_event
window.addEventListener("resize", this.onResize);

//获取鼠标位置,决定是否打开设置面板
function onMouseClick(e) {
    this.clickX = e.x //获取鼠标的X坐标（鼠标与屏幕左侧的距离,单位为px）
    this.clickY = e.y //获取鼠标的Y坐标（鼠标与屏幕顶部的距离,单位为px）
    //浏览器的视口,不包括工具栏和滚动条:
    let innerWidth = window.innerWidth
    let innerHeight = window.innerHeight
    //设置区域为正方形，边长按照宽或高里面，比较小的值决定
    const setArea = 0.15;
    // innerWidth >= innerHeight 的情况下
    let MinY = innerHeight * (0.5 - setArea);
    let MaxY = innerHeight * (0.5 + setArea);
    let MinX = innerWidth * 0.5 - (MaxY - MinY) * 0.5;
    let MaxX = innerWidth * 0.5 + (MaxY - MinY) * 0.5;
    if (innerWidth < innerHeight) {
        MinX = innerWidth * (0.5 - setArea);
        MaxX = innerWidth * (0.5 + setArea);
        MinY = innerHeight * 0.5 - (MaxX - MinX) * 0.5;
        MaxY = innerHeight * 0.5 + (MaxX - MinX) * 0.5;
    }
    //在设置区域
    let inSetArea = false
    if ((this.clickX > MinX && this.clickX < MaxX) && (this.clickY > MinY && this.clickY < MaxY)) {
        console.log("点中了设置区域！");
        inSetArea = true
    }
    if (inSetArea) {
        //获取ID为 OpenSettingButton的元素，然后模拟点击
		document.getElementById("OpenSettingButton").click();
    }
}
//获取鼠标位置,决定是否打开设置面板
function onMouseMove(e) {
    this.clickX = e.x //获取鼠标的X坐标（鼠标与屏幕左侧的距离,单位为px）
    this.clickY = e.y //获取鼠标的Y坐标（鼠标与屏幕顶部的距离,单位为px）
    //浏览器的视口,不包括工具栏和滚动条:
    let innerWidth = window.innerWidth
    let innerHeight = window.innerHeight
    //设置区域为正方形，边长按照宽或高里面，比较小的值决定
    const setArea = 0.15;
    // innerWidth >= innerHeight 的情况下
    let MinY = innerHeight * (0.5 - setArea);
    let MaxY = innerHeight * (0.5 + setArea);
    let MinX = innerWidth * 0.5 - (MaxY - MinY) * 0.5;
    let MaxX = innerWidth * 0.5 + (MaxY - MinY) * 0.5;
    if (innerWidth < innerHeight) {
        MinX = innerWidth * (0.5 - setArea);
        MaxX = innerWidth * (0.5 + setArea);
        MinY = innerHeight * 0.5 - (MaxX - MinX) * 0.5;
        MaxY = innerHeight * 0.5 + (MaxX - MinX) * 0.5;
    }
    //在设置区域
    let inSetArea = false
    if ((this.clickX > MinX && this.clickX < MaxX) && (this.clickY > MinY && this.clickY < MaxY)) {
        inSetArea = true
    }
    if (inSetArea) {
        //console.log("在设置区域！");
        e.currentTarget.style.cursor = 'url(/static/images/SettingsOutline.png), pointer';
    } else {
        e.currentTarget.style.cursor = '';
    }
}
//获取ID为 mouseMoveArea 的元素
let mouseMoveArea = document.getElementById("mouseMoveArea")
// 鼠标移动的时候触发移动事件
mouseMoveArea.addEventListener('mousemove', onMouseMove)
// 点击的时候触发点击事件
mouseMoveArea.addEventListener('click', onMouseClick)
// 触摸的时候也触发点击事件
mouseMoveArea.addEventListener('touchstart', onMouseClick)
}

// ScrollMainArea 定义 BodyHTML
templ ScrollMainArea(s *state.GlobalState, book *entity.Book) {
	<div
		id="mouseMoveArea"
		class="flex flex-col items-center justify-center flex-1 w-full max-w-full pt-2 bg-base-100 text-base-content"
		:class="(theme.toString() ==='light'||theme.toString() ==='dark'||theme.toString() ==='retro'||theme.toString() ==='lofi'||theme.toString() ==='nord') && 'bg-base-300'"
	>
		<!-- Alpine.js 动态CSS，只支持内联写法 -->
		<!-- Alpine.js 的 v-if 需要用template包裹起来，原因参照： https://alpinejs.dev/directives/if -->
		<!-- https://htmx.org/docs/#triggers -->
		<!-- https://htmx.org/docs/#swapping -->
		<!-- hx-get 用于获取图片的URL，hx-trigger 用于触发加载，hx-swap 用于替换元素，innerHTML默认值，将内容放在目标元素内 outerHTML用返回的内容替换整个目标元素  hx-target 用于指定目标元素 -->
		<noscript class="loading-lazy">
			for key, image := range book.Pages.Images {
				<div class="flex flex-col justify-start m-0 max-w-full lg:max-w-[800px] rounded" :style="{ marginBottom: $store.scroll.marginBottomOnScrollMode + 'px' }">
					if strings.Contains(image.Url, ".html")&& !strings.Contains(image.Url, "hidden.") {
						<div hx-get={ image.Url } hx-trigger="load" hx-swap="innerHTML" class="w-full m-0"></div>
					}
					if key <= 2 && !strings.Contains(image.Url, "hidden.")&& !strings.Contains(image.Url, ".html") {
						<img
							class="w-full m-0"
							src={ image.Url }
							x-on:load="
                            if ($event.target.naturalWidth > $event.target.naturalHeight) {
                                $el.classList.add('double');
                                $el.classList.remove('single');
                            } else { 
                                $el.classList.add('single');
                                $el.classList.remove('double');
                            }"
						/>
					}
					if key > 2 && !strings.Contains(image.Url, "hidden.")&& !strings.Contains(image.Url, ".html") {
						<img
							loading="lazy"
							class="w-full m-0"
							src={ image.Url }
							x-on:load="
                            if ($event.target.naturalWidth > $event.target.naturalHeight) {
                                $el.classList.add('double');
                                $el.classList.remove('single');
                            } else { 
                                $el.classList.add('single');
                                $el.classList.remove('double');
                            }"
						/>
					}
					<template x-if="$store.scroll.showPageNum">
						<div class="w-full mt-0 mb-2 text-lg font-semibold text-center ">{ fmt.Sprintf("%d / %d", key+1,book.BookInfo.PageCount) }</div>
					</template>
				</div>
			}
		</noscript>
	</div>
	<button id="BackTopButton" style="display: none" class="fixed flex items-center justify-center w-10 h-10 text-white bg-blue-500 rounded-full shadow-lg bottom-4 right-4">
		<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512"><path d="M256 48C141.13 48 48 141.13 48 256s93.13 208 208 208s208-93.13 208-208S370.87 48 256 48zm96 270.63l-96-96l-96 96L137.37 296L256 177.37L374.63 296z" fill="currentColor"></path></svg>
	</button>
	@ScrollScripts()
	<style>
    /* https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit */
    img {
        margin: auto;
        /* object-fit: scale-down; */
        /* margin-top: v-bind(margin+'px'); */
        margin-bottom: v-bind(margin+'px');
        /* padding-bottom: 30px; */
        /* border-radius: 3px; */
        /* 任意数量的阴影，用逗号分隔 如果元素同时设置了 border-radius属性，那么阴影也会有圆角效果。*/
        /* 属性可设置的值包括阴影的 X 轴偏移量、Y 轴偏移量、模糊半径、扩散半径和颜色。 */
        /* box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); */
        box-shadow: 0px 6px 3px 0px rgba(0, 0, 0, 0.19);
    }

    .page_hint {
        /* 文字颜色 */
        color: #413d3d;
        /* 文字阴影：https://www.w3school.com.cn/css/css3_shadows.asp*/
        text-shadow: -1px 0 rgb(240, 229, 229), 0 1px rgb(253, 242, 242),
            1px 0 rgb(206, 183, 183), 0 -1px rgb(196, 175, 175);
    }

    .LoadingImage {
        width: 90vw;
        max-width: 90vw;
    }

    .ErrorImage {
        width: 90vw;
        max-width: 90vw;
    }

    /* 横屏（显示区域）时的CSS样式,IE无效 */
    @media screen and (min-aspect-ratio: 19/19) {
        .SinglePageImage {
            width: v-bind(sPWL);
            max-width: 100%;
        }

        .DoublePageImage {
            width: v-bind(dPWL);
            max-width: 100%;
        }
    }

    /* 竖屏(显示区域)CSS样式,IE无效 */
    @media screen and (max-aspect-ratio: 19/19) {
        .SinglePageImage {
            width: v-bind(sPWP);
            max-width: 100%;
        }

        .DoublePageImage {
            /* width: 100%; */
            width: v-bind(dPWP);
            max-width: 100%;
        }
    }
    </style>
}

templ ScrollDrawerSlot() {
	<div></div>
}

// ScrollPage 定义 BodyHTML
templ ScrollPage(s *state.GlobalState, book *entity.Book) {
	@components.Header(components.HeaderProps{
		Title:           getPageTitle(s.RequestBookID),
		ShowReturnIcon:  true,
		ReturnUrl:       getReturnUrl(s.RequestBookID),
		SetDownLoadLink: false,
		InShelf:         false,
		DownLoadLink:    "",
		SetTheme:        true,
	})
	@ScrollMainArea(s, book)
	@components.Footer(s.Version)
	@components.Drawer(s, ScrollDrawerSlot())
	@components.QRCode(s)
}
