package flip

import (
	"github.com/gin-gonic/gin"
	"github.com/yumenaka/comigo/entity"
	"github.com/yumenaka/comigo/htmx/state"
	"github.com/yumenaka/comigo/htmx/templates/common"
	"strconv"
)

script FlipScripts() {

//可见区域变化时，改变页面状态
function onResize() {
    this.FlipModeConfig.imageMaxWidth = window.innerWidth
    this.clientWidth = document.documentElement.clientWidth
    this.clientHeight = document.documentElement.clientHeight
    // var aspectRatio = window.innerWidth / window.innerHeight
    this.aspectRatio = this.clientWidth / this.clientHeight
    // 为了调试的时候方便,阈值是正方形
    if (this.aspectRatio > (19 / 19)) {
        this.FlipModeConfig.isLandscapeMode = true
        this.FlipModeConfig.isPortraitMode = false
    } else {
        this.FlipModeConfig.isLandscapeMode = false
        this.FlipModeConfig.isPortraitMode = true
    }
}
//文档视图调整大小时触发 resize 事件。 https://developer.mozilla.org/zh-CN/docs/Web/API/Window/resize_event
window.addEventListener("resize", this.onResize);

//获取鼠标位置,决定是否打开设置面板
function onMouseClick(e) {
    this.clickX = e.x //获取鼠标的X坐标（鼠标与屏幕左侧的距离,单位为px）
    this.clickY = e.y //获取鼠标的Y坐标（鼠标与屏幕顶部的距离,单位为px）
    //浏览器的视口,不包括工具栏和滚动条:
    let innerWidth = window.innerWidth
    let innerHeight = window.innerHeight
    //设置区域为正方形，边长按照宽或高里面，比较小的值决定
    const setArea = 0.15;
    // innerWidth >= innerHeight 的情况下
    let MinY = innerHeight * (0.5 - setArea);
    let MaxY = innerHeight * (0.5 + setArea);
    let MinX = innerWidth * 0.5 - (MaxY - MinY) * 0.5;
    let MaxX = innerWidth * 0.5 + (MaxY - MinY) * 0.5;
    if (innerWidth < innerHeight) {
        MinX = innerWidth * (0.5 - setArea);
        MaxX = innerWidth * (0.5 + setArea);
        MinY = innerHeight * 0.5 - (MaxX - MinX) * 0.5;
        MaxY = innerHeight * 0.5 + (MaxX - MinX) * 0.5;
    }
    //在设置区域
    let inSetArea = false
    if ((this.clickX > MinX && this.clickX < MaxX) && (this.clickY > MinY && this.clickY < MaxY)) {
        console.log("点中了设置区域！");
        inSetArea = true
    }
    if (inSetArea) {
        //获取ID为 OpenSettingButton的元素，然后模拟点击
		document.getElementById("OpenSettingButton").click();
    }
}
//获取鼠标位置,决定是否显示鼠标
function onMouseMove(e) {
    this.clickX = e.x //获取鼠标的X坐标（鼠标与屏幕左侧的距离,单位为px）
    this.clickY = e.y //获取鼠标的Y坐标（鼠标与屏幕顶部的距离,单位为px）
    //浏览器的视口,不包括工具栏和滚动条:
    let innerWidth = window.innerWidth
    let innerHeight = window.innerHeight
    //设置区域为正方形，边长按照宽或高里面，比较小的值决定
    const setArea = 0.15;
    // innerWidth >= innerHeight 的情况下
    let MinY = innerHeight * (0.5 - setArea);
    let MaxY = innerHeight * (0.5 + setArea);
    let MinX = innerWidth * 0.5 - (MaxY - MinY) * 0.5;
    let MaxX = innerWidth * 0.5 + (MaxY - MinY) * 0.5;
    if (innerWidth < innerHeight) {
        MinX = innerWidth * (0.5 - setArea);
        MaxX = innerWidth * (0.5 + setArea);
        MinY = innerHeight * 0.5 - (MaxX - MinX) * 0.5;
        MaxY = innerHeight * 0.5 + (MaxX - MinX) * 0.5;
    }
    //在设置区域
    let inSetArea = false
    if ((this.clickX > MinX && this.clickX < MaxX) && (this.clickY > MinY && this.clickY < MaxY)) {
        inSetArea = true
    }
    if (inSetArea) {
        //console.log("在设置区域！");
        e.currentTarget.style.cursor = 'url(/static/images/SettingsOutline.png), pointer';
    } else {
        e.currentTarget.style.cursor = '';
    }
}
//获取ID为 mouseMoveArea 的元素
let mouseMoveArea = document.getElementById("mouseMoveArea")
// 鼠标移动的时候触发移动事件
mouseMoveArea.addEventListener('mousemove', onMouseMove)
// 点击的时候触发点击事件
mouseMoveArea.addEventListener('click', onMouseClick)
// 触摸的时候也触发点击事件
mouseMoveArea.addEventListener('touchstart', onMouseClick)

function hideComponent() {
  return {
    showDiv: true,
    hideTimeout: null,
    startHideTimer() {
      // Cancel any existing timer
      this.cancelHideTimer();
      // Start a new timer to hide the div after 3 seconds
      this.hideTimeout = setTimeout(() => {
        this.showDiv = false;
      }, 3000);
    },
    cancelHideTimer() {
      // Clear the hide timer if it exists
      if (this.hideTimeout) {
        clearTimeout(this.hideTimeout);
        this.hideTimeout = null;
      }
      // Ensure the div is shown
      this.showDiv = true;
    }
  }
}


}

templ FlipMainArea(s *state.GlobalState, book *entity.Book) {
	<div
		id="mouseMoveArea"
		class="flex flex-col items-center justify-center flex-1 w-full max-w-full bg-base-100 text-base-content"
		:class="(theme.toString() ==='light'||theme.toString() ==='dark'||theme.toString() ==='retro'||theme.toString() ==='lofi'||theme.toString() ==='nord') && 'bg-base-300'"
	>
		<div
			class="manga_area"
			id="MangaMain"
			@click.stop="onMouseClick"
			@mousemove.stop="onMouseMove"
			@mouseleave.stop="onMouseLeave"
		>
			<div class="manga_area_img_div">
				<!-- 非自动拼合模式最简单,直接显示一张图 -->
				<img
					class="w-auto h-auto"
					v-bind:src="imageParametersString(book.pages.images[nowPageNum - 1].url)
            "
					v-bind:alt="nowPageNum.toString()"
				/>
				<!-- 简单拼合双页,不管单双页什么的 -->
				<img
					v-if="!FlipModeConfig.autoDoublePageModeFlag &&
              FlipModeConfig.doublePageModeFlag &&
              nowPageNum < book.page_count
            "
					v-bind:src="imageParametersString(book.pages.images[nowPageNum].url)
            "
					v-bind:alt="(nowPageNum + 1).toString()"
				/>
				<!-- 自动拼合模式当前页,如果开启自动拼合,右边可能显示拼合页 -->
				<img
					v-if="FlipModeConfig.autoDoublePageModeFlag &&
              nowPageNum < book.page_count &&
            nowAndNextPageIsSingle()
            "
					v-bind:src="imageParametersString(book.pages.images[nowPageNum].url)
            "
					v-bind:alt="(nowPageNum + 1).toString()"
				/>
			</div>
		</div>
		for key, image := range book.Pages.Images {
			<img class="m-2 max-w-full lg:max-w-[800px] rounded shadow-lg" src={ image.Url } alt={ strconv.Itoa(key) }/>
		}
	</div>
	<button id="BackTopButton" style="display: none" class="fixed flex items-center justify-center w-10 h-10 text-white bg-blue-500 rounded-full shadow-lg bottom-4 right-4">
		<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512"><path d="M256 48C141.13 48 48 141.13 48 256s93.13 208 208 208s208-93.13 208-208S370.87 48 256 48zm96 270.63l-96-96l-96 96L137.37 296L256 177.37L374.63 296z" fill="currentColor"></path></svg>
	</button>
	@FlipScripts()
}

templ FlipDrawerSlot() {
  <!-- 阅读模式 -->
  <!-- toggle组件来自： https://flowbite.com/docs/forms/toggle/ -->
  <label
    class="inline-flex items-center w-full my-4 cursor-pointer outline outline-offset-8 outline-dotted hover:outline outline-2">
    <input type="checkbox" :value="$store.global.readMode === 'scroll'" x-on:click="$store.global.toggleReadMode()"
      class="sr-only peer" />
    <div
      class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
    </div>
    <span class="text-sm font-medium ms-3"
      x-text="$store.global.readMode === 'scroll'?i18next.t('scroll_mode'):i18next.t('flip_mode')">
      Toggle
      me
    </span>
  </label>
  <!-- 远程同步翻页 -->
  <label
    class="inline-flex items-center w-full my-4 cursor-pointer outline outline-offset-8 outline-dotted hover:outline outline-2">
    <input type="checkbox" :value="$store.flip.syncPage" x-on:click="$store.flip.syncpage =!$store.flip.syncPage"
      class="sr-only peer" />
    <div
      class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
    </div>
    <span class="text-sm font-medium ms-3" x-text="i18next.t('SyncPage')"></span>
  </label>
  <!-- 保存阅读进度 -->
  <label
    class="inline-flex items-center w-full my-4 cursor-pointer outline outline-offset-8 outline-dotted hover:outline outline-2">
    <input type="checkbox" :value="$store.flip.savePageNum"
      x-on:click="$store.flip.savePageNum =!$store.flip.savePageNum" class="sr-only peer" />
    <div
      class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
    </div>
    <span class="text-sm font-medium ms-3" x-text="i18next.t('SavePageNum')"></span>
  </label>
  <!-- 右开本（日漫模式）  -->
  <label
    class="inline-flex items-center w-full my-4 cursor-pointer outline outline-offset-8 outline-dotted hover:outline outline-2">
    <input type="checkbox" :value="$store.flip.rightToLeft" x-on:click="$store.flip.rightToLeft =!$store.flip.rightToLeft"
      class="sr-only peer" />
    <div
      class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
    </div>
    <span class="text-sm font-medium ms-3"
      x-text="$store.flip.rightToLeft?i18next.t('LeftScreenToNext'):i18next.t('RightScreenToNext')"></span>
  </label>
  <!-- 单页模式  -->
  <label
    class="inline-flex items-center w-full my-4 cursor-pointer outline outline-offset-8 outline-dotted hover:outline outline-2">
    <input type="checkbox" :value="$store.flip.doublePageMode"
      x-on:click="$store.flip.doublePageMode =!$store.flip.doublePageMode" class="sr-only peer" />
    <div
      class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
    </div>
    <span class="text-sm font-medium ms-3"
      x-text="$store.flip.doublePageMode?i18next.t('DoublePageMode'):i18next.t('SinglePageMode')"></span>
  </label>
  <!-- 自动隐藏工具栏  -->
  <label
    class="inline-flex items-center w-full my-4 cursor-pointer outline outline-offset-8 outline-dotted hover:outline outline-2">
    <input type="checkbox" :value="$store.flip.autoHideToolbar" x-on:click="$store.flip.autoHideToolbar =!$store.flip.autoHideToolbar"
      class="sr-only peer" />
    <div
      class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
    </div>
    <span class="text-sm font-medium ms-3" x-text="i18next.t('AutoHideToolbar')"></span>
  </label>
  <!-- 显示页数  -->
  <label
    class="inline-flex items-center w-full my-4 cursor-pointer outline outline-offset-8 outline-dotted hover:outline outline-2">
    <input type="checkbox" :value="$store.flip.showPageNum" x-on:click="$store.flip.showPageNum =!$store.flip.showPageNum"
      class="sr-only peer" />
    <div
      class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
    </div>
    <span class="text-sm font-medium ms-3" x-text="i18next.t('ShowPageNum')"></span>
  </label>
}

// FlipPage 定义 BodyHTML
templ FlipPage(c *gin.Context, s *state.GlobalState, book *entity.Book,readingProgress *entity.ReadingProgress) {
	@common.Header(
		c,
		common.HeaderProps{
			Title:           common.GetPageTitle(book.BookInfo.BookID),
			ShowReturnIcon:  true,
			ReturnUrl:       common.GetReturnUrl(book.BookInfo.BookID),
			SetDownLoadLink: false,
			InShelf:         false,
			DownLoadLink:    "",
			SetTheme:        true,
			FlipMode:        true,
		})
	@FlipMainArea(s, book)
	@common.Footer(s.Version)
	@common.Drawer(s, FlipDrawerSlot())
	@common.QRCode(s)
}
