package pages

import (
	"github.com/yumenaka/comigo/entity"
	"github.com/yumenaka/comigo/htmx/state"
	"github.com/yumenaka/comigo/htmx/templates/components"
)

script FlipScripts() {
//滚动到顶部
function FlipToTop(FlipDuration) {
    let FlipStep = -window.FlipY / (FlipDuration / 15),
        FlipInterval = setInterval(function () {
            if (window.FlipY !== 0) {
                window.FlipBy(0, FlipStep);
            }
            else clearInterval(FlipInterval);
        }, 15);
}
// Button ID为BackTopButton的元素，点击后滚动到顶部
document.getElementById("BackTopButton").addEventListener("click", function () {
    FlipToTop(500);
});

//滚动到一定位置显示返回顶部按钮
let FlipTopSave = 0
let FlipDownFlag = false
let step = 0
function onFlip() {
    let FlipTop = document.documentElement.FlipTop || document.body.FlipTop;
    FlipDownFlag = FlipTop > FlipTopSave;
    //防手抖,小于一定数值状态就不变 Math.abs()会导致报错
    step = FlipTopSave - FlipTop;
    // console.log("this.FlipDownFlag:",this.FlipDownFlag,"FlipTop:",FlipTop,"step:", step);
    FlipTopSave = FlipTop
    if (step < -10 || step > 10) {
        showBackTopFlag = ((FlipTop > 400) && !FlipDownFlag);
        if (showBackTopFlag) {
            document.getElementById("BackTopButton").style.display = "block";
        } else {
            document.getElementById("BackTopButton").style.display = "none";
        }
    }
}
window.addEventListener("Flip", onFlip);

//可见区域变化的时候改变页面状态
function onResize() {
    this.FlipModeConfig.imageMaxWidth = window.innerWidth
    this.clientWidth = document.documentElement.clientWidth
    this.clientHeight = document.documentElement.clientHeight
    // var aspectRatio = window.innerWidth / window.innerHeight
    this.aspectRatio = this.clientWidth / this.clientHeight
    // 为了调试的时候方便,阈值是正方形
    if (this.aspectRatio > (19 / 19)) {
        this.FlipModeConfig.isLandscapeMode = true
        this.FlipModeConfig.isPortraitMode = false
    } else {
        this.FlipModeConfig.isLandscapeMode = false
        this.FlipModeConfig.isPortraitMode = true
    }
}
//文档视图调整大小时触发 resize 事件。 https://developer.mozilla.org/zh-CN/docs/Web/API/Window/resize_event
window.addEventListener("resize", this.onResize);

//获取鼠标位置,决定是否打开设置面板
function onMouseClick(e) {
    this.clickX = e.x //获取鼠标的X坐标（鼠标与屏幕左侧的距离,单位为px）
    this.clickY = e.y //获取鼠标的Y坐标（鼠标与屏幕顶部的距离,单位为px）
    //浏览器的视口,不包括工具栏和滚动条:
    let innerWidth = window.innerWidth
    let innerHeight = window.innerHeight
    //设置区域为正方形，边长按照宽或高里面，比较小的值决定
    const setArea = 0.15;
    // innerWidth >= innerHeight 的情况下
    let MinY = innerHeight * (0.5 - setArea);
    let MaxY = innerHeight * (0.5 + setArea);
    let MinX = innerWidth * 0.5 - (MaxY - MinY) * 0.5;
    let MaxX = innerWidth * 0.5 + (MaxY - MinY) * 0.5;
    if (innerWidth < innerHeight) {
        MinX = innerWidth * (0.5 - setArea);
        MaxX = innerWidth * (0.5 + setArea);
        MinY = innerHeight * 0.5 - (MaxX - MinX) * 0.5;
        MaxY = innerHeight * 0.5 + (MaxX - MinX) * 0.5;
    }
    //在设置区域
    let inSetArea = false
    if ((this.clickX > MinX && this.clickX < MaxX) && (this.clickY > MinY && this.clickY < MaxY)) {
        console.log("点中了设置区域！");
        inSetArea = true
    }
    if (inSetArea) {
        //获取ID为 OpenSettingButton的元素，然后模拟点击
		document.getElementById("OpenSettingButton").click();
    }
}
//获取鼠标位置,决定是否打开设置面板
function onMouseMove(e) {
    this.clickX = e.x //获取鼠标的X坐标（鼠标与屏幕左侧的距离,单位为px）
    this.clickY = e.y //获取鼠标的Y坐标（鼠标与屏幕顶部的距离,单位为px）
    //浏览器的视口,不包括工具栏和滚动条:
    let innerWidth = window.innerWidth
    let innerHeight = window.innerHeight
    //设置区域为正方形，边长按照宽或高里面，比较小的值决定
    const setArea = 0.15;
    // innerWidth >= innerHeight 的情况下
    let MinY = innerHeight * (0.5 - setArea);
    let MaxY = innerHeight * (0.5 + setArea);
    let MinX = innerWidth * 0.5 - (MaxY - MinY) * 0.5;
    let MaxX = innerWidth * 0.5 + (MaxY - MinY) * 0.5;
    if (innerWidth < innerHeight) {
        MinX = innerWidth * (0.5 - setArea);
        MaxX = innerWidth * (0.5 + setArea);
        MinY = innerHeight * 0.5 - (MaxX - MinX) * 0.5;
        MaxY = innerHeight * 0.5 + (MaxX - MinX) * 0.5;
    }
    //在设置区域
    let inSetArea = false
    if ((this.clickX > MinX && this.clickX < MaxX) && (this.clickY > MinY && this.clickY < MaxY)) {
        inSetArea = true
    }
    if (inSetArea) {
        //console.log("在设置区域！");
        e.currentTarget.style.cursor = 'url(/static/images/SettingsOutline.png), pointer';
    } else {
        e.currentTarget.style.cursor = '';
    }
}
//获取ID为 mouseMoveArea 的元素
let mouseMoveArea = document.getElementById("mouseMoveArea")
// 鼠标移动的时候触发移动事件
mouseMoveArea.addEventListener('mousemove', onMouseMove)
// 点击的时候触发点击事件
mouseMoveArea.addEventListener('click', onMouseClick)
// 触摸的时候也触发点击事件
mouseMoveArea.addEventListener('touchstart', onMouseClick)
}

templ FlipMainArea(s *state.GlobalState, book *entity.Book) {
	<div id="mouseMoveArea"
		class="flex flex-col items-center justify-center flex-1 w-full max-w-full bg-base-100 text-base-content"
		:class="(theme.toString() ==='light'||theme.toString() ==='dark'||theme.toString() ==='retro'||theme.toString() ==='lofi'||theme.toString() ==='nord') && 'bg-base-300'"
	>
	      <div class="manga_area" id="MangaMain" @click.stop="onMouseClick" @mousemove.stop="onMouseMove"
            @mouseleave.stop="onMouseLeave">
            <div class="manga_area_img_div">
              <!-- 非自动拼合模式最简单,直接显示一张图 -->
              <img class="w-auto h-auto" v-bind:src="imageParametersString(book.pages.images[nowPageNum - 1].url)
            " v-bind:alt="nowPageNum.toString()" />

              <!-- 简单拼合双页,不管单双页什么的 -->
              <img v-if="!FlipModeConfig.autoDoublePageModeFlag &&
              FlipModeConfig.doublePageModeFlag &&
              nowPageNum < book.page_count
            " v-bind:src="imageParametersString(book.pages.images[nowPageNum].url)
            " v-bind:alt="(nowPageNum + 1).toString()" />

              <!-- 自动拼合模式当前页,如果开启自动拼合,右边可能显示拼合页 -->
              <img v-if="FlipModeConfig.autoDoublePageModeFlag &&
              nowPageNum < book.page_count &&
            nowAndNextPageIsSingle()
            " v-bind:src="imageParametersString(book.pages.images[nowPageNum].url)
            " v-bind:alt="(nowPageNum + 1).toString()" />
            </div>
          </div>

		<noscript class="loading-lazy">
			for key, image := range book.Pages.Images {
				if key <= 2 {
					<img class="m-2 max-w-full lg:max-w-[800px] rounded shadow-lg" src={ image.Url }/>
				}
				if key > 2 {
					<img loading="lazy" class="m-2 max-w-full lg:max-w-[800px] rounded shadow-lg" src={ image.Url }/>
				}
            }
		</noscript>
	</div>
	    <button id="BackTopButton" style="display: none" class="fixed bottom-4 right-4 bg-blue-500 text-white rounded-full w-10 h-10 flex items-center justify-center shadow-lg">
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512"><path d="M256 48C141.13 48 48 141.13 48 256s93.13 208 208 208s208-93.13 208-208S370.87 48 256 48zm96 270.63l-96-96l-96 96L137.37 296L256 177.37L374.63 296z" fill="currentColor"></path></svg>
        </button>
	@FlipScripts()
}

templ FlipDrawerSlot() {
      <div></div>
}

// FlipPage 定义 BodyHTML
templ FlipPage(s *state.GlobalState, book *entity.Book) {
	@components.Header(components.HeaderProps{
		Title:           components.GetPageTitle(book.BookInfo.BookID),
		ShowReturnIcon:  true,
		ReturnUrl: getReturnUrl(book.BookInfo.BookID),
		SetDownLoadLink: false,
		InShelf:         false,
		DownLoadLink:    "",
		SetTheme:        true,
	})
	@FlipMainArea(s, book)
	@components.Footer(s.Version)
	@components.Drawer(s,FlipDrawerSlot())
	@components.QRCode(s)
}
