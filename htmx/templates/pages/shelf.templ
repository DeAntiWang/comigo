package pages

import (
	"fmt"
	"github.com/yumenaka/comigo/entity"
	"github.com/yumenaka/comigo/htmx/state"
	"github.com/yumenaka/comigo/htmx/templates/components"
	"net/url"
	"strconv"
)


// ShelfPage 书架页面
templ ShelfPage(s *state.GlobalState) {
	@components.Header(components.HeaderProps{
		Title:           components.GetPageTitle(s.RequestBookID),
		ShowReturnIcon:  true,
		ReturnUrl: getReturnUrl(s.RequestBookID),
		SetDownLoadLink: false,
		InShelf:         false,
		DownLoadLink:    "",
		SetTheme:        true,
	})
	@ShelfMainArea(s)
	@components.Footer(s.Version)
	@components.Drawer(s, ShelfDrawerSlot())
	@components.QRCode(s)
}

templ ShelfDrawerSlot() {
	<!-- <div class="w-full font-semibold text-left">阅读模式</div> -->
	<!--阅读模式的toggle  https://flowbite.com/docs/forms/toggle/ -->
	<label class="inline-flex items-center w-full my-2 cursor-pointer">
		<input type="checkbox" :value="$store.global.readMode === 'scroll'" x-on:click="$store.global.toggleReadMode()" class="sr-only peer"/>
		<div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
		<span class="text-sm font-medium text-gray-900 ms-3 dark:text-gray-300" x-text="$store.global.readMode === 'scroll'?'卷轴模式':'翻页模式'">Toggle me</span>
	</label>
	<!-- <div class="w-full my-2 font-semibold text-left">显示书名</div> -->
	<label class="inline-flex items-center w-full my-2 cursor-pointer">
		<input type="checkbox" :value="$store.shelf.showTitle" x-on:click="$store.shelf.showTitle =!$store.shelf.showTitle" class="sr-only peer"/>
		<div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
		<span class="text-sm font-medium text-gray-900 ms-3 dark:text-gray-300" x-text="$store.shelf.showTitle === true?'显示书名':'隐藏书名'">Toggle me</span>
	</label>
	<!-- <div class="w-full my-2 font-semibold text-left">简化书名</div> -->
	<label class="inline-flex items-center w-full my-2 cursor-pointer">
		<input type="checkbox" :value="$store.shelf.simplifyTitle" x-on:click="$store.shelf.simplifyTitle =!$store.shelf.simplifyTitle" class="sr-only peer"/>
		<div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
		<span class="text-sm font-medium text-gray-900 ms-3 dark:text-gray-300" x-text="$store.shelf.simplifyTitle === true?'简化书名':'完整书名'">Toggle me</span>
	</label>
	<!-- QRCode  -->
	<!-- <div class="w-full my-2 font-semibold text-left">简化书名</div> -->
	<div class="w-48 h-48 p-1 m-1" x-data="{ qrcodeSrc: '' }" x-init="qrcodeSrc = window.location.origin +'/api/qrcode.png?qrcode_str='+ encodeURIComponent(window.location.toString().replace(window.location.hostname,serverHost))">
		<img class="w-48 h-48" :src="qrcodeSrc"/>
	</div>
}

templ ShelfMainArea(s *state.GlobalState) {
	<!-- 有的颜色模板只有base-100 ，没有颜色更深或更的 base-200 base-300，这样写是为了防止没定义颜色 -->
	<div
		x-data
		class="flex flex-row flex-wrap content-start justify-center flex-1 w-full bg-base-100 text-base-content"
		:class="(theme.toString() ==='light'||theme.toString() ==='dark'||theme.toString() ==='retro'||theme.toString() ==='lofi'||theme.toString() ==='nord') && 'bg-base-300'"
	>
		for _, book := range s.TopBooks.BookInfos {
			<!-- 用go-templ，创建Alpine的x-data。 -->
			<!-- 如果把链接的 target 属性设置为 "_blank"，该链接会在新窗口中打开。 -->
			<a
				x-data={ fmt.Sprintf("{ BookID: %s }", "\""+book.BookID+"\"") }
				:href={ getHref(book) }
				target={ getTarget(book) }
				class={ backgroundImage(state.GetCloverBackgroundImageUrl(&book)) , "relative w-32 mx-4 my-4 bg-top bg-cover rounded shadow-xl h-44 hover:shadow-2xl ring-1 ring-gray-400 hover:ring hover:ring-blue-500 overflow-hidden" }
			>
				<!-- 书籍类型图标 -->
				<div class="absolute top-0 z-10 right-1  text-lg font-bold text-yellow-400">{string(book.Type)}</div>
				<!-- 图书封面 -->
				<div
					x-show="$store.shelf.showTitle"
					class="absolute inset-x-0 bottom-0 text-sm font-semibold text-center text-black bg-gray-100 border-blue-800 rounded-b h-1/4 bg-opacity-80"
				>
					<span class="absolute inset-x-0 top-0 p-1 align-middle" x-text={ "$store.shelf.simplifyTitle === true?'" + book.ShortTitle() + "':'" + book.Title + "'" }></span>
				</div>
			</a>
		}
		if s.GetAllBookNum() == 0 {
			<div class="flex flex-col justify-center min-h-64">No Book , { strconv.Itoa(s.GetAllBookNum()) }</div>
		}
	</div>
}

func getHref(book entity.BookInfo) string {
	// 如果是书籍组，就跳转到子书架
	if book.Type == entity.TypeBooksGroup {
		return "\"/shelf/" + book.BookID + "/\""
	}
	// 如果是视频、音频、未知文件，就在新窗口打开
	if book.Type == entity.TypeVideo || book.Type == entity.TypeAudio || book.Type == entity.TypeUnknownFile {
		return "\"/api/raw/" + book.BookID + "/" + url.QueryEscape(book.Title) + "\""
	}
	// 其他情况，跳转到阅读页面,
	return "'/'+$store.global.readMode+ '/' + BookID"
}

func getTarget(book entity.BookInfo) string {
	if book.Type == entity.TypeVideo || book.Type == entity.TypeAudio || book.Type == entity.TypeUnknownFile {
		return "_blank"
	}
	return "_self"
}

css backgroundImage(imageUrl string) {
	background-image: { "url(" + imageUrl + ")" };
}
