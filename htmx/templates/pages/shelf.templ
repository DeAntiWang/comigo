package pages

import (
	"github.com/yumenaka/comi/entity"
	"github.com/yumenaka/comi/htmx/state"
	"github.com/yumenaka/comi/htmx/templates/components"
	"strconv"
	"fmt"
	"net/url"
)

// ShelfPage 书架页面
templ ShelfPage(s *state.GlobalState) {
			@components.Header(components.HeaderProps{
				Title:           "Comigo" + " " + s.Version,
				ShowReturnIcon:  true,
				SetDownLoadLink: false,
				InShelf:         false,
				DownLoadLink:    "",
				SetTheme:        true,
			})
			@ShelfMainArea(s)
			@components.Footer(s.Version)
			@components.Drawer(s)
			@components.QRCode(s)
}

templ ShelfMainArea(s *state.GlobalState) {
    <!-- 有的颜色模板只有base-100 ，没有颜色更深或更的 base-200 base-300，这样写是为了防止没定义颜色 -->
	<div  x-data class="w-full flex-1 flex flex-row flex-wrap content-start justify-center  bg-base-100 text-base-content"
	:class="(theme.toString() ==='light'||theme.toString() ==='dark'||theme.toString() ==='retro'||theme.toString() ==='lofi'||theme.toString() ==='nord') && 'bg-base-300'"
	 >
		for _, book := range s.BooksList.BookInfos {
		    <!-- 用go-templ，创建Alpine的x-data。 -->
			<!-- 如果把链接的 target 属性设置为 "_blank"，该链接会在新窗口中打开。 -->
			<a   x-data={fmt.Sprintf("{ BookID: %s }", "\""+book.BookID+"\""  ) } :href={ getHref(book) }
			  target={ getTarget(book) } class={ backgroundImage(state.GetCloverBackgroundImageUrl(&book)) , "relative w-32 mx-4 my-4 bg-top bg-cover rounded shadow-xl h-44 hover:shadow-2xl ring-1 ring-gray-400 hover:ring hover:ring-blue-500 overflow-hidden" }>
				<!-- 书籍类型图标 -->
				<!-- <SvgBookIcon :book_info="book_info"></SvgBookIcon> -->
				<!-- 图书封面 -->
				<div
					class="absolute inset-x-0 bottom-0 text-sm font-semibold text-center text-black bg-gray-100 border-blue-800 rounded-b h-1/4 bg-opacity-80"
				>
					<span class="absolute inset-x-0 top-0 p-1 align-middle">
						{ book.Title }
					</span>
				</div>
			</a>
		}
		if s.GetAllBookNum() == 0 {
			<div class="flex flex-col justify-center min-h-64">No Book , { strconv.Itoa(s.GetAllBookNum()) }</div>
		}
	</div>
}

func getHref(book entity.BookInfo) string {
    // 如果是书籍组，就跳转到子书架
    if book.Type == entity.TypeBooksGroup {
        return  "/shelf/" + book.BookID+ "/"
    }
    // 如果是视频、音频、未知文件，就在新窗口打开
	if book.Type == entity.TypeVideo || book.Type == entity.TypeAudio || book.Type == entity.TypeUnknownFile {
		return "/api/raw/" + book.BookID+ "/" +url.QueryEscape(book.Title)
	}
	return "'/'+$store.global.readMode+ '/' + BookID"
}


func getTarget(book entity.BookInfo) string {
	if book.Type == entity.TypeVideo || book.Type == entity.TypeAudio || book.Type == entity.TypeUnknownFile {
		return "_blank"
	}
	return "_self"
}

css backgroundImage(imageUrl string) {
	background-image: { "url(" + imageUrl + ")" };
}
