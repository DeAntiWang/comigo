// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yumenaka/comi/ent/singlepageinfo"
)

// SinglePageInfoCreate is the builder for creating a SinglePageInfo entity.
type SinglePageInfoCreate struct {
	config
	mutation *SinglePageInfoMutation
	hooks    []Hook
}

// SetBookID sets the "BookID" field.
func (spic *SinglePageInfoCreate) SetBookID(s string) *SinglePageInfoCreate {
	spic.mutation.SetBookID(s)
	return spic
}

// SetPageNum sets the "PageNum" field.
func (spic *SinglePageInfoCreate) SetPageNum(i int) *SinglePageInfoCreate {
	spic.mutation.SetPageNum(i)
	return spic
}

// SetNameInArchive sets the "NameInArchive" field.
func (spic *SinglePageInfoCreate) SetNameInArchive(s string) *SinglePageInfoCreate {
	spic.mutation.SetNameInArchive(s)
	return spic
}

// SetURL sets the "Url" field.
func (spic *SinglePageInfoCreate) SetURL(s string) *SinglePageInfoCreate {
	spic.mutation.SetURL(s)
	return spic
}

// SetBlurHash sets the "BlurHash" field.
func (spic *SinglePageInfoCreate) SetBlurHash(s string) *SinglePageInfoCreate {
	spic.mutation.SetBlurHash(s)
	return spic
}

// SetHeight sets the "Height" field.
func (spic *SinglePageInfoCreate) SetHeight(i int) *SinglePageInfoCreate {
	spic.mutation.SetHeight(i)
	return spic
}

// SetWidth sets the "Width" field.
func (spic *SinglePageInfoCreate) SetWidth(i int) *SinglePageInfoCreate {
	spic.mutation.SetWidth(i)
	return spic
}

// SetModeTime sets the "ModeTime" field.
func (spic *SinglePageInfoCreate) SetModeTime(t time.Time) *SinglePageInfoCreate {
	spic.mutation.SetModeTime(t)
	return spic
}

// SetNillableModeTime sets the "ModeTime" field if the given value is not nil.
func (spic *SinglePageInfoCreate) SetNillableModeTime(t *time.Time) *SinglePageInfoCreate {
	if t != nil {
		spic.SetModeTime(*t)
	}
	return spic
}

// SetFileSize sets the "FileSize" field.
func (spic *SinglePageInfoCreate) SetFileSize(i int64) *SinglePageInfoCreate {
	spic.mutation.SetFileSize(i)
	return spic
}

// SetRealImageFilePATH sets the "RealImageFilePATH" field.
func (spic *SinglePageInfoCreate) SetRealImageFilePATH(s string) *SinglePageInfoCreate {
	spic.mutation.SetRealImageFilePATH(s)
	return spic
}

// SetImgType sets the "ImgType" field.
func (spic *SinglePageInfoCreate) SetImgType(s string) *SinglePageInfoCreate {
	spic.mutation.SetImgType(s)
	return spic
}

// Mutation returns the SinglePageInfoMutation object of the builder.
func (spic *SinglePageInfoCreate) Mutation() *SinglePageInfoMutation {
	return spic.mutation
}

// Save creates the SinglePageInfo in the database.
func (spic *SinglePageInfoCreate) Save(ctx context.Context) (*SinglePageInfo, error) {
	spic.defaults()
	return withHooks(ctx, spic.sqlSave, spic.mutation, spic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spic *SinglePageInfoCreate) SaveX(ctx context.Context) *SinglePageInfo {
	v, err := spic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spic *SinglePageInfoCreate) Exec(ctx context.Context) error {
	_, err := spic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spic *SinglePageInfoCreate) ExecX(ctx context.Context) {
	if err := spic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spic *SinglePageInfoCreate) defaults() {
	if _, ok := spic.mutation.ModeTime(); !ok {
		v := singlepageinfo.DefaultModeTime()
		spic.mutation.SetModeTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spic *SinglePageInfoCreate) check() error {
	if _, ok := spic.mutation.BookID(); !ok {
		return &ValidationError{Name: "BookID", err: errors.New(`ent: missing required field "SinglePageInfo.BookID"`)}
	}
	if _, ok := spic.mutation.PageNum(); !ok {
		return &ValidationError{Name: "PageNum", err: errors.New(`ent: missing required field "SinglePageInfo.PageNum"`)}
	}
	if _, ok := spic.mutation.NameInArchive(); !ok {
		return &ValidationError{Name: "NameInArchive", err: errors.New(`ent: missing required field "SinglePageInfo.NameInArchive"`)}
	}
	if _, ok := spic.mutation.URL(); !ok {
		return &ValidationError{Name: "Url", err: errors.New(`ent: missing required field "SinglePageInfo.Url"`)}
	}
	if _, ok := spic.mutation.BlurHash(); !ok {
		return &ValidationError{Name: "BlurHash", err: errors.New(`ent: missing required field "SinglePageInfo.BlurHash"`)}
	}
	if _, ok := spic.mutation.Height(); !ok {
		return &ValidationError{Name: "Height", err: errors.New(`ent: missing required field "SinglePageInfo.Height"`)}
	}
	if _, ok := spic.mutation.Width(); !ok {
		return &ValidationError{Name: "Width", err: errors.New(`ent: missing required field "SinglePageInfo.Width"`)}
	}
	if _, ok := spic.mutation.ModeTime(); !ok {
		return &ValidationError{Name: "ModeTime", err: errors.New(`ent: missing required field "SinglePageInfo.ModeTime"`)}
	}
	if _, ok := spic.mutation.FileSize(); !ok {
		return &ValidationError{Name: "FileSize", err: errors.New(`ent: missing required field "SinglePageInfo.FileSize"`)}
	}
	if _, ok := spic.mutation.RealImageFilePATH(); !ok {
		return &ValidationError{Name: "RealImageFilePATH", err: errors.New(`ent: missing required field "SinglePageInfo.RealImageFilePATH"`)}
	}
	if _, ok := spic.mutation.ImgType(); !ok {
		return &ValidationError{Name: "ImgType", err: errors.New(`ent: missing required field "SinglePageInfo.ImgType"`)}
	}
	return nil
}

func (spic *SinglePageInfoCreate) sqlSave(ctx context.Context) (*SinglePageInfo, error) {
	if err := spic.check(); err != nil {
		return nil, err
	}
	_node, _spec := spic.createSpec()
	if err := sqlgraph.CreateNode(ctx, spic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	spic.mutation.id = &_node.ID
	spic.mutation.done = true
	return _node, nil
}

func (spic *SinglePageInfoCreate) createSpec() (*SinglePageInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &SinglePageInfo{config: spic.config}
		_spec = sqlgraph.NewCreateSpec(singlepageinfo.Table, sqlgraph.NewFieldSpec(singlepageinfo.FieldID, field.TypeInt))
	)
	if value, ok := spic.mutation.BookID(); ok {
		_spec.SetField(singlepageinfo.FieldBookID, field.TypeString, value)
		_node.BookID = value
	}
	if value, ok := spic.mutation.PageNum(); ok {
		_spec.SetField(singlepageinfo.FieldPageNum, field.TypeInt, value)
		_node.PageNum = value
	}
	if value, ok := spic.mutation.NameInArchive(); ok {
		_spec.SetField(singlepageinfo.FieldNameInArchive, field.TypeString, value)
		_node.NameInArchive = value
	}
	if value, ok := spic.mutation.URL(); ok {
		_spec.SetField(singlepageinfo.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := spic.mutation.BlurHash(); ok {
		_spec.SetField(singlepageinfo.FieldBlurHash, field.TypeString, value)
		_node.BlurHash = value
	}
	if value, ok := spic.mutation.Height(); ok {
		_spec.SetField(singlepageinfo.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if value, ok := spic.mutation.Width(); ok {
		_spec.SetField(singlepageinfo.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := spic.mutation.ModeTime(); ok {
		_spec.SetField(singlepageinfo.FieldModeTime, field.TypeTime, value)
		_node.ModeTime = value
	}
	if value, ok := spic.mutation.FileSize(); ok {
		_spec.SetField(singlepageinfo.FieldFileSize, field.TypeInt64, value)
		_node.FileSize = value
	}
	if value, ok := spic.mutation.RealImageFilePATH(); ok {
		_spec.SetField(singlepageinfo.FieldRealImageFilePATH, field.TypeString, value)
		_node.RealImageFilePATH = value
	}
	if value, ok := spic.mutation.ImgType(); ok {
		_spec.SetField(singlepageinfo.FieldImgType, field.TypeString, value)
		_node.ImgType = value
	}
	return _node, _spec
}

// SinglePageInfoCreateBulk is the builder for creating many SinglePageInfo entities in bulk.
type SinglePageInfoCreateBulk struct {
	config
	builders []*SinglePageInfoCreate
}

// Save creates the SinglePageInfo entities in the database.
func (spicb *SinglePageInfoCreateBulk) Save(ctx context.Context) ([]*SinglePageInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spicb.builders))
	nodes := make([]*SinglePageInfo, len(spicb.builders))
	mutators := make([]Mutator, len(spicb.builders))
	for i := range spicb.builders {
		func(i int, root context.Context) {
			builder := spicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SinglePageInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spicb *SinglePageInfoCreateBulk) SaveX(ctx context.Context) []*SinglePageInfo {
	v, err := spicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spicb *SinglePageInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := spicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spicb *SinglePageInfoCreateBulk) ExecX(ctx context.Context) {
	if err := spicb.Exec(ctx); err != nil {
		panic(err)
	}
}
