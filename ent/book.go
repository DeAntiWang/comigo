// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yumenaka/comi/ent/book"
)

// Book is the model entity for the Book schema.
type Book struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	// 书名
	Name string `json:"Name,omitempty"`
	// BookID holds the value of the "BookID" field.
	// 书籍ID
	BookID string `json:"BookID,omitempty"`
	// FilePath holds the value of the "FilePath" field.
	// 文件路径
	FilePath string `json:"FilePath,omitempty"`
	// BookStorePath holds the value of the "BookStorePath" field.
	// 书库路径
	BookStorePath string `json:"BookStorePath,omitempty"`
	// Type holds the value of the "Type" field.
	// 书籍类型
	Type string `json:"Type,omitempty"`
	// ChildBookNum holds the value of the "ChildBookNum" field.
	ChildBookNum int `json:"ChildBookNum,omitempty"`
	// Depth holds the value of the "Depth" field.
	Depth int `json:"Depth,omitempty"`
	// ParentFolder holds the value of the "ParentFolder" field.
	ParentFolder string `json:"ParentFolder,omitempty"`
	// AllPageNum holds the value of the "AllPageNum" field.
	// 总页数
	AllPageNum int `json:"AllPageNum,omitempty"`
	// FileSize holds the value of the "FileSize" field.
	FileSize int64 `json:"FileSize,omitempty"`
	// Authors holds the value of the "Authors" field.
	Authors string `json:"Authors,omitempty"`
	// ISBN holds the value of the "ISBN" field.
	ISBN string `json:"ISBN,omitempty"`
	// Press holds the value of the "Press" field.
	Press string `json:"Press,omitempty"`
	// PublishedAt holds the value of the "PublishedAt" field.
	PublishedAt string `json:"PublishedAt,omitempty"`
	// ExtractPath holds the value of the "ExtractPath" field.
	ExtractPath string `json:"ExtractPath,omitempty"`
	// Modified holds the value of the "Modified" field.
	// 创建时间
	Modified time.Time `json:"Modified,omitempty"`
	// ExtractNum holds the value of the "ExtractNum" field.
	ExtractNum int `json:"ExtractNum,omitempty"`
	// InitComplete holds the value of the "InitComplete" field.
	InitComplete bool `json:"InitComplete,omitempty"`
	// ReadPercent holds the value of the "ReadPercent" field.
	ReadPercent float64 `json:"ReadPercent,omitempty"`
	// NonUTF8Zip holds the value of the "NonUTF8Zip" field.
	NonUTF8Zip bool `json:"NonUTF8Zip,omitempty"`
	// ZipTextEncoding holds the value of the "ZipTextEncoding" field.
	ZipTextEncoding string `json:"ZipTextEncoding,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Book) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case book.FieldInitComplete, book.FieldNonUTF8Zip:
			values[i] = new(sql.NullBool)
		case book.FieldReadPercent:
			values[i] = new(sql.NullFloat64)
		case book.FieldID, book.FieldChildBookNum, book.FieldDepth, book.FieldAllPageNum, book.FieldFileSize, book.FieldExtractNum:
			values[i] = new(sql.NullInt64)
		case book.FieldName, book.FieldBookID, book.FieldFilePath, book.FieldBookStorePath, book.FieldType, book.FieldParentFolder, book.FieldAuthors, book.FieldISBN, book.FieldPress, book.FieldPublishedAt, book.FieldExtractPath, book.FieldZipTextEncoding:
			values[i] = new(sql.NullString)
		case book.FieldModified:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Book", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Book fields.
func (b *Book) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case book.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case book.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case book.FieldBookID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field BookID", values[i])
			} else if value.Valid {
				b.BookID = value.String
			}
		case book.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FilePath", values[i])
			} else if value.Valid {
				b.FilePath = value.String
			}
		case book.FieldBookStorePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field BookStorePath", values[i])
			} else if value.Valid {
				b.BookStorePath = value.String
			}
		case book.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value.Valid {
				b.Type = value.String
			}
		case book.FieldChildBookNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ChildBookNum", values[i])
			} else if value.Valid {
				b.ChildBookNum = int(value.Int64)
			}
		case book.FieldDepth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Depth", values[i])
			} else if value.Valid {
				b.Depth = int(value.Int64)
			}
		case book.FieldParentFolder:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ParentFolder", values[i])
			} else if value.Valid {
				b.ParentFolder = value.String
			}
		case book.FieldAllPageNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field AllPageNum", values[i])
			} else if value.Valid {
				b.AllPageNum = int(value.Int64)
			}
		case book.FieldFileSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field FileSize", values[i])
			} else if value.Valid {
				b.FileSize = value.Int64
			}
		case book.FieldAuthors:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Authors", values[i])
			} else if value.Valid {
				b.Authors = value.String
			}
		case book.FieldISBN:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ISBN", values[i])
			} else if value.Valid {
				b.ISBN = value.String
			}
		case book.FieldPress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Press", values[i])
			} else if value.Valid {
				b.Press = value.String
			}
		case book.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PublishedAt", values[i])
			} else if value.Valid {
				b.PublishedAt = value.String
			}
		case book.FieldExtractPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ExtractPath", values[i])
			} else if value.Valid {
				b.ExtractPath = value.String
			}
		case book.FieldModified:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Modified", values[i])
			} else if value.Valid {
				b.Modified = value.Time
			}
		case book.FieldExtractNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExtractNum", values[i])
			} else if value.Valid {
				b.ExtractNum = int(value.Int64)
			}
		case book.FieldInitComplete:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field InitComplete", values[i])
			} else if value.Valid {
				b.InitComplete = value.Bool
			}
		case book.FieldReadPercent:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field ReadPercent", values[i])
			} else if value.Valid {
				b.ReadPercent = value.Float64
			}
		case book.FieldNonUTF8Zip:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field NonUTF8Zip", values[i])
			} else if value.Valid {
				b.NonUTF8Zip = value.Bool
			}
		case book.FieldZipTextEncoding:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ZipTextEncoding", values[i])
			} else if value.Valid {
				b.ZipTextEncoding = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Book.
// Note that you need to call Book.Unwrap() before calling this method if this Book
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Book) Update() *BookUpdateOne {
	return (&BookClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Book entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Book) Unwrap() *Book {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Book is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Book) String() string {
	var builder strings.Builder
	builder.WriteString("Book(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", Name=")
	builder.WriteString(b.Name)
	builder.WriteString(", BookID=")
	builder.WriteString(b.BookID)
	builder.WriteString(", FilePath=")
	builder.WriteString(b.FilePath)
	builder.WriteString(", BookStorePath=")
	builder.WriteString(b.BookStorePath)
	builder.WriteString(", Type=")
	builder.WriteString(b.Type)
	builder.WriteString(", ChildBookNum=")
	builder.WriteString(fmt.Sprintf("%v", b.ChildBookNum))
	builder.WriteString(", Depth=")
	builder.WriteString(fmt.Sprintf("%v", b.Depth))
	builder.WriteString(", ParentFolder=")
	builder.WriteString(b.ParentFolder)
	builder.WriteString(", AllPageNum=")
	builder.WriteString(fmt.Sprintf("%v", b.AllPageNum))
	builder.WriteString(", FileSize=")
	builder.WriteString(fmt.Sprintf("%v", b.FileSize))
	builder.WriteString(", Authors=")
	builder.WriteString(b.Authors)
	builder.WriteString(", ISBN=")
	builder.WriteString(b.ISBN)
	builder.WriteString(", Press=")
	builder.WriteString(b.Press)
	builder.WriteString(", PublishedAt=")
	builder.WriteString(b.PublishedAt)
	builder.WriteString(", ExtractPath=")
	builder.WriteString(b.ExtractPath)
	builder.WriteString(", Modified=")
	builder.WriteString(b.Modified.Format(time.ANSIC))
	builder.WriteString(", ExtractNum=")
	builder.WriteString(fmt.Sprintf("%v", b.ExtractNum))
	builder.WriteString(", InitComplete=")
	builder.WriteString(fmt.Sprintf("%v", b.InitComplete))
	builder.WriteString(", ReadPercent=")
	builder.WriteString(fmt.Sprintf("%v", b.ReadPercent))
	builder.WriteString(", NonUTF8Zip=")
	builder.WriteString(fmt.Sprintf("%v", b.NonUTF8Zip))
	builder.WriteString(", ZipTextEncoding=")
	builder.WriteString(b.ZipTextEncoding)
	builder.WriteByte(')')
	return builder.String()
}

// Books is a parsable slice of Book.
type Books []*Book

func (b Books) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
