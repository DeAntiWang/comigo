// Code generated by ent, DO NOT EDIT.

package singlepageinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the singlepageinfo type in the database.
	Label = "single_page_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBookID holds the string denoting the bookid field in the database.
	FieldBookID = "book_id"
	// FieldPageNum holds the string denoting the pagenum field in the database.
	FieldPageNum = "page_num"
	// FieldNameInArchive holds the string denoting the nameinarchive field in the database.
	FieldNameInArchive = "name_in_archive"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldBlurHash holds the string denoting the blurhash field in the database.
	FieldBlurHash = "blur_hash"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldModeTime holds the string denoting the modetime field in the database.
	FieldModeTime = "mode_time"
	// FieldFileSize holds the string denoting the filesize field in the database.
	FieldFileSize = "file_size"
	// FieldRealImageFilePATH holds the string denoting the realimagefilepath field in the database.
	FieldRealImageFilePATH = "real_image_file_path"
	// FieldImgType holds the string denoting the imgtype field in the database.
	FieldImgType = "img_type"
	// Table holds the table name of the singlepageinfo in the database.
	Table = "single_page_infos"
)

// Columns holds all SQL columns for singlepageinfo fields.
var Columns = []string{
	FieldID,
	FieldBookID,
	FieldPageNum,
	FieldNameInArchive,
	FieldURL,
	FieldBlurHash,
	FieldHeight,
	FieldWidth,
	FieldModeTime,
	FieldFileSize,
	FieldRealImageFilePATH,
	FieldImgType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "single_page_infos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"book_page_infos",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultModeTime holds the default value on creation for the "ModeTime" field.
	DefaultModeTime func() time.Time
)

// OrderOption defines the ordering options for the SinglePageInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBookID orders the results by the BookID field.
func ByBookID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBookID, opts...).ToFunc()
}

// ByPageNum orders the results by the PageNum field.
func ByPageNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPageNum, opts...).ToFunc()
}

// ByNameInArchive orders the results by the NameInArchive field.
func ByNameInArchive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameInArchive, opts...).ToFunc()
}

// ByURL orders the results by the Url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByBlurHash orders the results by the BlurHash field.
func ByBlurHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlurHash, opts...).ToFunc()
}

// ByHeight orders the results by the Height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByWidth orders the results by the Width field.
func ByWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWidth, opts...).ToFunc()
}

// ByModeTime orders the results by the ModeTime field.
func ByModeTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModeTime, opts...).ToFunc()
}

// ByFileSize orders the results by the FileSize field.
func ByFileSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileSize, opts...).ToFunc()
}

// ByRealImageFilePATH orders the results by the RealImageFilePATH field.
func ByRealImageFilePATH(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRealImageFilePATH, opts...).ToFunc()
}

// ByImgType orders the results by the ImgType field.
func ByImgType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImgType, opts...).ToFunc()
}
