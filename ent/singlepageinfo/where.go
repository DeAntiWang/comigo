// Code generated by ent, DO NOT EDIT.

package singlepageinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/yumenaka/comi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldID, id))
}

// BookID applies equality check predicate on the "BookID" field. It's identical to BookIDEQ.
func BookID(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldBookID, v))
}

// PageNum applies equality check predicate on the "PageNum" field. It's identical to PageNumEQ.
func PageNum(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldPageNum, v))
}

// NameInArchive applies equality check predicate on the "NameInArchive" field. It's identical to NameInArchiveEQ.
func NameInArchive(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldNameInArchive, v))
}

// URL applies equality check predicate on the "Url" field. It's identical to URLEQ.
func URL(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldURL, v))
}

// BlurHash applies equality check predicate on the "BlurHash" field. It's identical to BlurHashEQ.
func BlurHash(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldBlurHash, v))
}

// Height applies equality check predicate on the "Height" field. It's identical to HeightEQ.
func Height(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldHeight, v))
}

// Width applies equality check predicate on the "Width" field. It's identical to WidthEQ.
func Width(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldWidth, v))
}

// ModeTime applies equality check predicate on the "ModeTime" field. It's identical to ModeTimeEQ.
func ModeTime(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldModeTime, v))
}

// FileSize applies equality check predicate on the "FileSize" field. It's identical to FileSizeEQ.
func FileSize(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldFileSize, v))
}

// RealImageFilePATH applies equality check predicate on the "RealImageFilePATH" field. It's identical to RealImageFilePATHEQ.
func RealImageFilePATH(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldRealImageFilePATH, v))
}

// ImgType applies equality check predicate on the "ImgType" field. It's identical to ImgTypeEQ.
func ImgType(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldImgType, v))
}

// BookIDEQ applies the EQ predicate on the "BookID" field.
func BookIDEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldBookID, v))
}

// BookIDNEQ applies the NEQ predicate on the "BookID" field.
func BookIDNEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldBookID, v))
}

// BookIDIn applies the In predicate on the "BookID" field.
func BookIDIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldBookID, vs...))
}

// BookIDNotIn applies the NotIn predicate on the "BookID" field.
func BookIDNotIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldBookID, vs...))
}

// BookIDGT applies the GT predicate on the "BookID" field.
func BookIDGT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldBookID, v))
}

// BookIDGTE applies the GTE predicate on the "BookID" field.
func BookIDGTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldBookID, v))
}

// BookIDLT applies the LT predicate on the "BookID" field.
func BookIDLT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldBookID, v))
}

// BookIDLTE applies the LTE predicate on the "BookID" field.
func BookIDLTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldBookID, v))
}

// BookIDContains applies the Contains predicate on the "BookID" field.
func BookIDContains(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContains(FieldBookID, v))
}

// BookIDHasPrefix applies the HasPrefix predicate on the "BookID" field.
func BookIDHasPrefix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasPrefix(FieldBookID, v))
}

// BookIDHasSuffix applies the HasSuffix predicate on the "BookID" field.
func BookIDHasSuffix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasSuffix(FieldBookID, v))
}

// BookIDEqualFold applies the EqualFold predicate on the "BookID" field.
func BookIDEqualFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEqualFold(FieldBookID, v))
}

// BookIDContainsFold applies the ContainsFold predicate on the "BookID" field.
func BookIDContainsFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContainsFold(FieldBookID, v))
}

// PageNumEQ applies the EQ predicate on the "PageNum" field.
func PageNumEQ(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldPageNum, v))
}

// PageNumNEQ applies the NEQ predicate on the "PageNum" field.
func PageNumNEQ(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldPageNum, v))
}

// PageNumIn applies the In predicate on the "PageNum" field.
func PageNumIn(vs ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldPageNum, vs...))
}

// PageNumNotIn applies the NotIn predicate on the "PageNum" field.
func PageNumNotIn(vs ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldPageNum, vs...))
}

// PageNumGT applies the GT predicate on the "PageNum" field.
func PageNumGT(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldPageNum, v))
}

// PageNumGTE applies the GTE predicate on the "PageNum" field.
func PageNumGTE(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldPageNum, v))
}

// PageNumLT applies the LT predicate on the "PageNum" field.
func PageNumLT(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldPageNum, v))
}

// PageNumLTE applies the LTE predicate on the "PageNum" field.
func PageNumLTE(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldPageNum, v))
}

// NameInArchiveEQ applies the EQ predicate on the "NameInArchive" field.
func NameInArchiveEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldNameInArchive, v))
}

// NameInArchiveNEQ applies the NEQ predicate on the "NameInArchive" field.
func NameInArchiveNEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldNameInArchive, v))
}

// NameInArchiveIn applies the In predicate on the "NameInArchive" field.
func NameInArchiveIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldNameInArchive, vs...))
}

// NameInArchiveNotIn applies the NotIn predicate on the "NameInArchive" field.
func NameInArchiveNotIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldNameInArchive, vs...))
}

// NameInArchiveGT applies the GT predicate on the "NameInArchive" field.
func NameInArchiveGT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldNameInArchive, v))
}

// NameInArchiveGTE applies the GTE predicate on the "NameInArchive" field.
func NameInArchiveGTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldNameInArchive, v))
}

// NameInArchiveLT applies the LT predicate on the "NameInArchive" field.
func NameInArchiveLT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldNameInArchive, v))
}

// NameInArchiveLTE applies the LTE predicate on the "NameInArchive" field.
func NameInArchiveLTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldNameInArchive, v))
}

// NameInArchiveContains applies the Contains predicate on the "NameInArchive" field.
func NameInArchiveContains(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContains(FieldNameInArchive, v))
}

// NameInArchiveHasPrefix applies the HasPrefix predicate on the "NameInArchive" field.
func NameInArchiveHasPrefix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasPrefix(FieldNameInArchive, v))
}

// NameInArchiveHasSuffix applies the HasSuffix predicate on the "NameInArchive" field.
func NameInArchiveHasSuffix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasSuffix(FieldNameInArchive, v))
}

// NameInArchiveEqualFold applies the EqualFold predicate on the "NameInArchive" field.
func NameInArchiveEqualFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEqualFold(FieldNameInArchive, v))
}

// NameInArchiveContainsFold applies the ContainsFold predicate on the "NameInArchive" field.
func NameInArchiveContainsFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContainsFold(FieldNameInArchive, v))
}

// URLEQ applies the EQ predicate on the "Url" field.
func URLEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "Url" field.
func URLNEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "Url" field.
func URLIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "Url" field.
func URLNotIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "Url" field.
func URLGT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "Url" field.
func URLGTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "Url" field.
func URLLT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "Url" field.
func URLLTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "Url" field.
func URLContains(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "Url" field.
func URLHasPrefix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "Url" field.
func URLHasSuffix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "Url" field.
func URLEqualFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "Url" field.
func URLContainsFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContainsFold(FieldURL, v))
}

// BlurHashEQ applies the EQ predicate on the "BlurHash" field.
func BlurHashEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldBlurHash, v))
}

// BlurHashNEQ applies the NEQ predicate on the "BlurHash" field.
func BlurHashNEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldBlurHash, v))
}

// BlurHashIn applies the In predicate on the "BlurHash" field.
func BlurHashIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldBlurHash, vs...))
}

// BlurHashNotIn applies the NotIn predicate on the "BlurHash" field.
func BlurHashNotIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldBlurHash, vs...))
}

// BlurHashGT applies the GT predicate on the "BlurHash" field.
func BlurHashGT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldBlurHash, v))
}

// BlurHashGTE applies the GTE predicate on the "BlurHash" field.
func BlurHashGTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldBlurHash, v))
}

// BlurHashLT applies the LT predicate on the "BlurHash" field.
func BlurHashLT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldBlurHash, v))
}

// BlurHashLTE applies the LTE predicate on the "BlurHash" field.
func BlurHashLTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldBlurHash, v))
}

// BlurHashContains applies the Contains predicate on the "BlurHash" field.
func BlurHashContains(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContains(FieldBlurHash, v))
}

// BlurHashHasPrefix applies the HasPrefix predicate on the "BlurHash" field.
func BlurHashHasPrefix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasPrefix(FieldBlurHash, v))
}

// BlurHashHasSuffix applies the HasSuffix predicate on the "BlurHash" field.
func BlurHashHasSuffix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasSuffix(FieldBlurHash, v))
}

// BlurHashEqualFold applies the EqualFold predicate on the "BlurHash" field.
func BlurHashEqualFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEqualFold(FieldBlurHash, v))
}

// BlurHashContainsFold applies the ContainsFold predicate on the "BlurHash" field.
func BlurHashContainsFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContainsFold(FieldBlurHash, v))
}

// HeightEQ applies the EQ predicate on the "Height" field.
func HeightEQ(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "Height" field.
func HeightNEQ(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "Height" field.
func HeightIn(vs ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "Height" field.
func HeightNotIn(vs ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "Height" field.
func HeightGT(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "Height" field.
func HeightGTE(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "Height" field.
func HeightLT(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "Height" field.
func HeightLTE(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldHeight, v))
}

// WidthEQ applies the EQ predicate on the "Width" field.
func WidthEQ(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "Width" field.
func WidthNEQ(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "Width" field.
func WidthIn(vs ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "Width" field.
func WidthNotIn(vs ...int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "Width" field.
func WidthGT(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "Width" field.
func WidthGTE(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "Width" field.
func WidthLT(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "Width" field.
func WidthLTE(v int) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldWidth, v))
}

// ModeTimeEQ applies the EQ predicate on the "ModeTime" field.
func ModeTimeEQ(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldModeTime, v))
}

// ModeTimeNEQ applies the NEQ predicate on the "ModeTime" field.
func ModeTimeNEQ(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldModeTime, v))
}

// ModeTimeIn applies the In predicate on the "ModeTime" field.
func ModeTimeIn(vs ...time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldModeTime, vs...))
}

// ModeTimeNotIn applies the NotIn predicate on the "ModeTime" field.
func ModeTimeNotIn(vs ...time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldModeTime, vs...))
}

// ModeTimeGT applies the GT predicate on the "ModeTime" field.
func ModeTimeGT(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldModeTime, v))
}

// ModeTimeGTE applies the GTE predicate on the "ModeTime" field.
func ModeTimeGTE(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldModeTime, v))
}

// ModeTimeLT applies the LT predicate on the "ModeTime" field.
func ModeTimeLT(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldModeTime, v))
}

// ModeTimeLTE applies the LTE predicate on the "ModeTime" field.
func ModeTimeLTE(v time.Time) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldModeTime, v))
}

// FileSizeEQ applies the EQ predicate on the "FileSize" field.
func FileSizeEQ(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldFileSize, v))
}

// FileSizeNEQ applies the NEQ predicate on the "FileSize" field.
func FileSizeNEQ(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldFileSize, v))
}

// FileSizeIn applies the In predicate on the "FileSize" field.
func FileSizeIn(vs ...int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldFileSize, vs...))
}

// FileSizeNotIn applies the NotIn predicate on the "FileSize" field.
func FileSizeNotIn(vs ...int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldFileSize, vs...))
}

// FileSizeGT applies the GT predicate on the "FileSize" field.
func FileSizeGT(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldFileSize, v))
}

// FileSizeGTE applies the GTE predicate on the "FileSize" field.
func FileSizeGTE(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldFileSize, v))
}

// FileSizeLT applies the LT predicate on the "FileSize" field.
func FileSizeLT(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldFileSize, v))
}

// FileSizeLTE applies the LTE predicate on the "FileSize" field.
func FileSizeLTE(v int64) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldFileSize, v))
}

// RealImageFilePATHEQ applies the EQ predicate on the "RealImageFilePATH" field.
func RealImageFilePATHEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldRealImageFilePATH, v))
}

// RealImageFilePATHNEQ applies the NEQ predicate on the "RealImageFilePATH" field.
func RealImageFilePATHNEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldRealImageFilePATH, v))
}

// RealImageFilePATHIn applies the In predicate on the "RealImageFilePATH" field.
func RealImageFilePATHIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldRealImageFilePATH, vs...))
}

// RealImageFilePATHNotIn applies the NotIn predicate on the "RealImageFilePATH" field.
func RealImageFilePATHNotIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldRealImageFilePATH, vs...))
}

// RealImageFilePATHGT applies the GT predicate on the "RealImageFilePATH" field.
func RealImageFilePATHGT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldRealImageFilePATH, v))
}

// RealImageFilePATHGTE applies the GTE predicate on the "RealImageFilePATH" field.
func RealImageFilePATHGTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldRealImageFilePATH, v))
}

// RealImageFilePATHLT applies the LT predicate on the "RealImageFilePATH" field.
func RealImageFilePATHLT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldRealImageFilePATH, v))
}

// RealImageFilePATHLTE applies the LTE predicate on the "RealImageFilePATH" field.
func RealImageFilePATHLTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldRealImageFilePATH, v))
}

// RealImageFilePATHContains applies the Contains predicate on the "RealImageFilePATH" field.
func RealImageFilePATHContains(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContains(FieldRealImageFilePATH, v))
}

// RealImageFilePATHHasPrefix applies the HasPrefix predicate on the "RealImageFilePATH" field.
func RealImageFilePATHHasPrefix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasPrefix(FieldRealImageFilePATH, v))
}

// RealImageFilePATHHasSuffix applies the HasSuffix predicate on the "RealImageFilePATH" field.
func RealImageFilePATHHasSuffix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasSuffix(FieldRealImageFilePATH, v))
}

// RealImageFilePATHEqualFold applies the EqualFold predicate on the "RealImageFilePATH" field.
func RealImageFilePATHEqualFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEqualFold(FieldRealImageFilePATH, v))
}

// RealImageFilePATHContainsFold applies the ContainsFold predicate on the "RealImageFilePATH" field.
func RealImageFilePATHContainsFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContainsFold(FieldRealImageFilePATH, v))
}

// ImgTypeEQ applies the EQ predicate on the "ImgType" field.
func ImgTypeEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEQ(FieldImgType, v))
}

// ImgTypeNEQ applies the NEQ predicate on the "ImgType" field.
func ImgTypeNEQ(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNEQ(FieldImgType, v))
}

// ImgTypeIn applies the In predicate on the "ImgType" field.
func ImgTypeIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldIn(FieldImgType, vs...))
}

// ImgTypeNotIn applies the NotIn predicate on the "ImgType" field.
func ImgTypeNotIn(vs ...string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldNotIn(FieldImgType, vs...))
}

// ImgTypeGT applies the GT predicate on the "ImgType" field.
func ImgTypeGT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGT(FieldImgType, v))
}

// ImgTypeGTE applies the GTE predicate on the "ImgType" field.
func ImgTypeGTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldGTE(FieldImgType, v))
}

// ImgTypeLT applies the LT predicate on the "ImgType" field.
func ImgTypeLT(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLT(FieldImgType, v))
}

// ImgTypeLTE applies the LTE predicate on the "ImgType" field.
func ImgTypeLTE(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldLTE(FieldImgType, v))
}

// ImgTypeContains applies the Contains predicate on the "ImgType" field.
func ImgTypeContains(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContains(FieldImgType, v))
}

// ImgTypeHasPrefix applies the HasPrefix predicate on the "ImgType" field.
func ImgTypeHasPrefix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasPrefix(FieldImgType, v))
}

// ImgTypeHasSuffix applies the HasSuffix predicate on the "ImgType" field.
func ImgTypeHasSuffix(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldHasSuffix(FieldImgType, v))
}

// ImgTypeEqualFold applies the EqualFold predicate on the "ImgType" field.
func ImgTypeEqualFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldEqualFold(FieldImgType, v))
}

// ImgTypeContainsFold applies the ContainsFold predicate on the "ImgType" field.
func ImgTypeContainsFold(v string) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(sql.FieldContainsFold(FieldImgType, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SinglePageInfo) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SinglePageInfo) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SinglePageInfo) predicate.SinglePageInfo {
	return predicate.SinglePageInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
